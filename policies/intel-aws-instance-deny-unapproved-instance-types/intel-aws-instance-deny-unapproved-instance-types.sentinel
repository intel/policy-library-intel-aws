import "tfplan/v2" as tfplan

param valid_actions default [
	["no-op"],
	["create"],
	["update"],
]

format = {
	"reset": "\033[0m",
	"info":  "\033[32m",
	"warn":  "\033[33m",
	"error": "\033[31m",
}

summary = func(input, level) {
	result = false
	if input.violations is empty {
		return true
	} else {
		log(input, format[level])
	}
	return result
}

log = func(input, output) {
	header(input, output)
	violations(input, output)
	return null
}

header = func(input, output) {
	print(
		output + "\t========================================================================\n",
		output + "\t                    _       _       _ \n",
		output + "\t                   (_)     | |     | |\n",
		output + "\t                    _ _ __ | |_ ___| |\n",
		output + "\t                   | | '_ \\| __/ _ \\ |\n",
		output + "\t                   | | | | | ||  __/ |\n",
		output + "\t                   |_|_| |_|\\__\\___|_|\n",
		output + "\t\n",
		output + "\t========================================================================\n",
		output + "\tName        :" + output + " " + "intel-aws-instance-deny-unapproved-instance-types.sentinel\n",
		output + "\tCategory    :" + output + " " + "Infrastructure (IaaS)\n",
		output + "\tProvider    :" + output + " " + "hashicorp/aws\n",
		output + "\tResource    :" + output + " " + "aws_instance\n",
		output + "\tParameter   :" + output + " " + "instance_type\n",
		output + "\tCheck       :" + output + " " + "instance_type contains\n",
		output + "\t\n",
		output + "\tCompute Optimized:\n",
		output + "\t             c6i.12xlarge, c6i.16xlarge\n",
		output + "\t             c6i.24xlarge, c6i.32xlarge\n",
		output + "\t             c6i.2xlarge, c6i.8xlarge\n",
		output + "\t             c6i.xlarge, c6i.large\n",
		output + "\t             c6i.metal, c6i.4xlarge\n",
		output + "\t             c6id.12xlarge, c6id.16xlarge\n",
		output + "\t             c6id.24xlarge, c6id.32xlarge\n",
		output + "\t             c6id.2xlarge, c6id.8xlarge\n",
		output + "\t             c6id.xlarge, c6id.large\n",
		output + "\t             c6id.metal, c6id.4xlarge\n",
		output + "\t             c6in.12xlarge, c6in.16xlarge\n",
		output + "\t             c6in.24xlarge, c6in.32xlarge\n",
		output + "\t             c6in.2xlarge, c6in.8xlarge\n",
		output + "\t             c6in.xlarge, c6in.large\n",
		output + "\t             c6in.4xlarge\n",
		output + "\tStorage Optimized:\n",
		output + "\t             i4i.16xlarge, i4i.32xlarge\n",
		output + "\t             i4i.2xlarge, i4i.8xlarge\n",
		output + "\t             i4i.xlarge, i4i.large\n",
		output + "\t             i4i.metal, i4i.4xlarge\n",
		output + "\tGeneral Optimized:\n",
		output + "\t             m6i.12xlarge,m6i.16xlarge\n",
		output + "\t             m6i.24xlarge, m6i.32xlarge\n",
		output + "\t             m6i.2xlarge, m6i.8xlarge\n",
		output + "\t             m6i.xlarge, m6i.large\n",
		output + "\t             m6i.metal, m6i.4xlarge\n",
		output + "\t             m6id.12xlarge, m6id.16xlarge\n",
		output + "\t             m6id.24xlarge, m6id.32xlarge\n",
		output + "\t             m6id.2xlarge, m6id.8xlarge\n",
		output + "\t             m6id.xlarge, m6id.large\n",
		output + "\t             m6id.metal, m6id.4xlarge\n",
		output + "\t             m6idn.12xlarge, m6idn.16xlarge\n",
		output + "\t             m6idn.24xlarge, m6idn.32xlarge\n",
		output + "\t             m6idn.2xlarge, m6idn.8xlarge\n",
		output + "\t             m6idn.xlarge, m6idn.large\n",
		output + "\t             m6idn.4xlarge, m6in.12xlarge\n",
		output + "\t             m6in.16xlarge, m6in.24xlarge\n",
		output + "\t             m6in.32xlarge, m6in.2xlarge\n",
		output + "\t             m6in.8xlarge, m6in.xlarge\n",
		output + "\t             m6in.large, m6in.4xlarge\n",
		output + "\tMemory Optimized:\n",
		output + "\t             r7iz.large, r7iz.xlarge\n",
		output + "\t             r7iz.2xlarge, r7iz.4xlarge\n",
		output + "\t             r7iz.8xlarge, r7iz.12xlarge\n",
		output + "\t             r7iz.24xlarge, r7iz.32xlarge\n",
		output + "\t             r7iz.metal16xl,r7iz.metal32xl\n",
		output + "\t             r6i.12xlarge, r6i.16xlarge\n",
		output + "\t             r6i.24xlarge, r6i.32xlarge\n",
		output + "\t             r6i.2xlarge, r6i.8xlarge\n",
		output + "\t             r6i.xlarge, r6i.large\n",
		output + "\t             r6i.metal, r6i.4xlarge\n",
		output + "\t             r6id.12xlarge, r6id.16xlarge\n",
		output + "\t             r6id.24xlarge, r6id.32xlarge\n",
		output + "\t             r6id.2xlarge, r6id.8xlarge\n",
		output + "\t             r6id.xlarge, r6id.large\n",
		output + "\t             r6id.metal, r6id.4xlarge\n",
		output + "\t             r6idn.12xlarge, r6idn.16xlarge\n",
		output + "\t             r6idn.24xlarge, r6idn.32xlarge\n",
		output + "\t             r6idn.2xlarge, r6idn.8xlarge\n",
		output + "\t             r6idn.xlarge, r6idn.large\n",
		output + "\t             r6idn.4xlarge, r6in.12xlarge\n",
		output + "\t             r6in.16xlarge, r6in.24xlarge\n",
		output + "\t             r6in.32xlarge, r6in.2xlarge\n",
		output + "\t             r6in.8xlarge, r6in.xlarge\n",
		output + "\t             r6in.large, r6in.4xlarge\n",
		output + "\t             x2idn.16xlarge, x2idn.24xlarge\n",
		output + "\t             x2idn.32xlarge, x2idn.metal\n",
		output + "\t             x2iedn.16xlarge, x2iedn.24xlarge\n",
		output + "\t             x2iedn.32xlarge, x2iedn.2xlarge\n",
		output + "\t             x2iedn.8xlarge x2iedn.xlarge\n",
		output + "\t             x2iedn.metal, x2iedn.4xlarge\n",
		output + "\tAccelerated Computing:\n",
		output + "\t             trn1.32xlarge, trn1.2xlarge\n",
	)
	return null
}

violations = func(input, output) {
	print(
		output + "\t========================================================================\n",
		output + "\tRESOURCE VIOLATIONS\n" + format.reset,
		output + "\tThe configured server type should use an Intel Xeon 3rd or 4th Generation Scalable processor (code-named Ice Lake and Sapphire Rapids)\n",
		output + "\t========================================================================\t",
	)
	for input.violations as violation {
		print(
			"\t",
			output + "name       :" + output + " " + violation.name + "\n\t",
			output + "type       :" + output + " " + violation.type + "\n\t",
			output + "address    :" + output + " " + violation.address + "\n\t",
			output + "message    :" + output + " " + violation.message + "\t\n",
			output + "\t------------------------------------------------------------------------\t",
		)
	}
	if (input.violations is not empty) {
		print(
			output + "\t",
			output + "Resources out of compliance: " + string(length(input.violations)) + "\n" + format.reset,
			output + "\t------------------------------------------------------------------------\t",
		)
	}
	return null
}

// Allowed server resource types
allowed_server_types = ["r7iz.large", "r7iz.xlarge", "r7iz.2xlarge", "r7iz.4xlarge", "r7iz.8xlarge", "r7iz.12xlarge", "r7iz.24xlarge", "r7iz.32xlarge", "r7iz.metal16xl", "r7iz.metal32xl", "r6i.12xlarge", "r6i.16xlarge", "r6i.24xlarge", "r6i.32xlarge", "r6i.2xlarge", "r6i.8xlarge", "r6i.xlarge", "r6i.large", "r6i.metal", "r6i.4xlarge", "r6id.12xlarge", "r6id.16xlarge", "r6id.24xlarge", "r6id.32xlarge", "r6id.2xlarge", "r6id.8xlarge", "r6id.xlarge", "r6id.large", "r6id.metal", "r6id.4xlarge", "r6idn.12xlarge", "r6idn.16xlarge", "r6idn.24xlarge", "r6idn.32xlarge", "r6idn.2xlarge", "r6idn.8xlarge", "r6idn.xlarge", "r6idn.large", "r6idn.4xlarge", "r6in.12xlarge", "r6in.16xlarge", "r6in.24xlarge", "r6in.32xlarge", "r6in.2xlarge", "r6in.8xlarge", "r6in.xlarge", "r6in.large", "r6in.4xlarge", "x2idn.16xlarge", "x2idn.24xlarge", "x2idn.32xlarge", "x2idn.metal", "x2iedn.16xlarge", "x2iedn.24xlarge", "x2iedn.32xlarge", "x2iedn.2xlarge", "x2iedn.8xlarge", "x2iedn.xlarge", "x2iedn.metal", "x2iedn.4xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "m6i.2xlarge", "m6i.8xlarge", "m6i.xlarge", "m6i.large", "m6i.metal", "m6i.4xlarge", "m6id.12xlarge", "m6id.16xlarge", "m6id.24xlarge", "m6id.32xlarge", "m6id.2xlarge", "m6id.8xlarge", "m6id.xlarge", "m6id.large", "m6id.metal", "m6id.4xlarge", "m6idn.12xlarge", "m6idn.16xlarge", "m6idn.24xlarge", "m6idn.32xlarge", "m6idn.2xlarge", "m6idn.8xlarge", "m6idn.xlarge", "m6idn.large", "m6idn.4xlarge", "m6in.12xlarge", "m6in.16xlarge", "m6in.24xlarge", "m6in.32xlarge", "m6in.2xlarge", "m6in.8xlarge", "m6in.xlarge", "m6in.large", "m6in.4xlarge", "i4i.16xlarge", "i4i.32xlarge", "i4i.2xlarge", "i4i.8xlarge", "i4i.xlarge", "i4i.large", "i4i.metal", "i4i.4xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "c6i.2xlarge", "c6i.8xlarge", "c6i.xlarge", "c6i.large", "c6i.metal", "c6i.4xlarge", "c6id.12xlarge", "c6id.16xlarge", "c6id.24xlarge", "c6id.32xlarge", "c6id.2xlarge", "c6id.8xlarge", "c6id.xlarge", "c6id.large", "c6id.metal", "c6id.4xlarge", "c6in.12xlarge", "c6in.16xlarge", "c6in.24xlarge", "c6in.32xlarge", "c6in.2xlarge", "c6in.8xlarge", "c6in.xlarge", "c6in.large", "c6in.4xlarge", "trn1.32xlarge", "trn1.2xlarge"]

doc = {
	"id":       "awsvm01",
	"resource": "aws_instance",
	"name":     "Server Type must be one of the approved instances",
}

// Filter resources by type
all_resources = filter tfplan.resource_changes as _, rc {
	rc.type is doc.resource and
		rc.mode is "managed" and
		rc.change.actions in valid_actions
}

// Filter resources that violate a given condition
violators = filter all_resources as _, r {
	r.change.after.instance_type not in allowed_server_types
}

// Build a summary report
summaryreport = {
	"id":   doc.id,
	"name": doc.name,
	"violations": map violators as _, violation {
		{
			"name":    violation.name,
			"address": violation.address,
			"type":    violation.type,
			"message": violation.change.after.instance_type + " is not an allowed server type.",
		}
	},
}

main = rule {
	summary(summaryreport, "warn")
}
